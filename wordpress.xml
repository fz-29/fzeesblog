<?xml version="1.0" encoding="UTF-8"?>
<!--
 This is a WordPress eXtended RSS file generated by WordPress as an export of your site.
 It contains information about your site's posts, pages, comments, categories, and other content.
 You may use this file to transfer that content from one site to another.
 This file is not intended to serve as a complete backup of your site.

 To import this information into a WordPress site follow these steps:
 1. Log in to that site as an administrator.
 2. Go to Tools: Import in the WordPress admin panel.
 3. Install the "WordPress" importer from the list.
 4. Activate & Run Importer.
 5. Upload this file using the form provided on that page.
 6. You will first be asked to map the authors in this export file to users
    on the site. For each author, you may choose to map to an
    existing user on the site or to create a new user.
 7. WordPress will then import each of the posts, pages, comments, categories, etc.
    contained in this file into your site.
-->
<!-- generator="WordPress.com" created="2016-12-24 16:53"-->
<rss version="2.0" xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.2/">
  <channel>
<title>Fz'sBlog</title>
<link>https://fzeesblog.wordpress.com</link>
<description>Code till death...</description>
<pubDate>Sat, 24 Dec 2016 16:53:30 +0000</pubDate>
<language>en</language>
<wp:wxr_version>1.2</wp:wxr_version>
<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
<wp:base_blog_url>https://fzeesblog.wordpress.com</wp:base_blog_url>
<wp:author>
  <wp:author_login>feroz29</wp:author_login>
  <wp:author_email>f29ahmad@gmail.com</wp:author_email>
  <wp:author_display_name><![CDATA[feroz29]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[]]></wp:author_last_name>
</wp:author>
<wp:category>
  <wp:term_id>3378</wp:term_id>
  <wp:category_nicename>algorithms</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Algorithms]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>3318695</wp:term_id>
  <wp:category_nicename>spoj</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Spoj]]></wp:cat_name>
  <wp:category_description><![CDATA[Competitive Coding]]></wp:category_description>
</wp:category>
<wp:category>
  <wp:term_id>4841</wp:term_id>
  <wp:category_nicename>tricks</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Tricks]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>1</wp:term_id>
  <wp:category_nicename>uncategorized</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name>
</wp:category>
<wp:tag>
  <wp:term_id>3116051</wp:term_id>
  <wp:tag_slug>boyer</wp:tag_slug>
  <wp:tag_name><![CDATA[BOYER]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2973425</wp:term_id>
  <wp:tag_slug>dijkstra</wp:tag_slug>
  <wp:tag_name><![CDATA[Dijkstra]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>345590282</wp:term_id>
  <wp:tag_slug>invcount</wp:tag_slug>
  <wp:tag_name><![CDATA[INVCOUNT]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>55168506</wp:term_id>
  <wp:tag_slug>inversion-count</wp:tag_slug>
  <wp:tag_name><![CDATA[INVERSION COUNT]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>345590288</wp:term_id>
  <wp:tag_slug>inversion-pairs</wp:tag_slug>
  <wp:tag_name><![CDATA[INVERSION PAIRS]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>303954</wp:term_id>
  <wp:tag_slug>kmp</wp:tag_slug>
  <wp:tag_name><![CDATA[KMP]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>232179</wp:term_id>
  <wp:tag_slug>majority</wp:tag_slug>
  <wp:tag_name><![CDATA[MAJORITY]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1811108</wp:term_id>
  <wp:tag_slug>merge-sort</wp:tag_slug>
  <wp:tag_name><![CDATA[MERGE SORT]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>536863</wp:term_id>
  <wp:tag_slug>moore</wp:tag_slug>
  <wp:tag_name><![CDATA[MOORE]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>228854</wp:term_id>
  <wp:tag_slug>pattern-matching</wp:tag_slug>
  <wp:tag_name><![CDATA[Pattern Matching]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2696476</wp:term_id>
  <wp:tag_slug>shortest-path</wp:tag_slug>
  <wp:tag_name><![CDATA[Shortest Path]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>313680205</wp:term_id>
  <wp:tag_slug>shpath</wp:tag_slug>
  <wp:tag_name><![CDATA[SHPATH]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>345590289</wp:term_id>
  <wp:tag_slug>solution-spoj</wp:tag_slug>
  <wp:tag_name><![CDATA[SOLUTION SPOJ]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>345590284</wp:term_id>
  <wp:tag_slug>spoj-invcnt</wp:tag_slug>
  <wp:tag_name><![CDATA[SPOJ INVCNT]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>345590286</wp:term_id>
  <wp:tag_slug>spoj-inversion-count</wp:tag_slug>
  <wp:tag_name><![CDATA[SPOJ INVERSION COUNT]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>385614594</wp:term_id>
  <wp:tag_slug>spoj-major</wp:tag_slug>
  <wp:tag_name><![CDATA[SPOJ MAJOR]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>386046</wp:term_id>
  <wp:tag_slug>string-matching</wp:tag_slug>
  <wp:tag_name><![CDATA[String Matching]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>50738</wp:term_id>
  <wp:tag_slug>voting</wp:tag_slug>
  <wp:tag_name><![CDATA[VOTING]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>385614596</wp:term_id>
  <wp:tag_slug>voting-algo</wp:tag_slug>
  <wp:tag_name><![CDATA[VOTING ALGO]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>42807823</wp:term_id>
  <wp:tag_slug>voting-algorithm</wp:tag_slug>
  <wp:tag_name><![CDATA[VOTING ALGORITHM]]></wp:tag_name>
</wp:tag>
<generator>http://wordpress.com/</generator>
<image>
		<url>https://s2.wp.com/i/buttonw-com.png</url>
		<title>Fz&#039;sBlog</title>
		<link>https://fzeesblog.wordpress.com</link>
	</image>
	<item>
  <title>About Me</title>
  <link>https://fzeesblog.wordpress.com/about-me/</link>
  <pubDate>Sat, 14 Mar 2015 19:10:36 +0000</pubDate>
  <dc:creator>feroz29</dc:creator>
  <guid isPermaLink="false">http://fzeesblog.wordpress.com/?page_id=1</guid>
  <description/>
  <content:encoded><![CDATA[I’m a simple guy who loves  tech, gadgets, games, physics and programming. Currently I m pursuing Bachelor in Tech. ( Computer Engineering ) from Delhi Technological University.
I love perfection and symmetry around me, not just love, I strive for it :P I wish to live life in much planned order(everyone does i guess), though its never. But I love the way it is( but most of the time I hate it due to uncertainities :P ). I always wish humans never had to sleep (may be a workaholic statement) as I enjoy my life doing what I do all the time.
In my free time, I love to be with my friends for some outing or movies( though the movie part is rare).
I believe teaching contributes a huge part to improving your own understanding thats why I am writing this blog to discuss and help people regarding questions on spoj. One can easily get solution(code) for the problems but most of the time, you have to understand logic from their code which is a bit cumbersome task of reverse engineering the code. So here is my blog to help people with the logics behind the code, my code may not be the best as there is always a scope of improvement. You can freely comment and help improve the solution.. Lets Code!! :)

&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1</wp:post_id>
  <wp:post_date>2015-03-14 19:10:36</wp:post_date>
  <wp:post_date_gmt>2015-03-14 19:10:36</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>about-me</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[82754425]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Hello world!</title>
  <link>https://fzeesblog.wordpress.com/2015/03/14/hello-world/</link>
  <pubDate>Sat, 14 Mar 2015 19:10:36 +0000</pubDate>
  <dc:creator>feroz29</dc:creator>
  <guid isPermaLink="false">http://fzeesblog.wordpress.com/?p=1</guid>
  <description/>
  <content:encoded><![CDATA[Finally, Today I got myself free from all assignments, projects and sheets. (Those Engineering Drawing ones :P ) I was planning to write blogs but kept delaying due to busy schedule.

So this is my first blog and on this site I will be posting Algorithms, Solutions to Problems on <a href="http://www.spoj.com/" target="_blank">SPOJ</a> and Some Tips and Tricks in C and C++.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2</wp:post_id>
  <wp:post_date>2015-03-14 19:10:36</wp:post_date>
  <wp:post_date_gmt>2015-03-14 19:10:36</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>hello-world</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>geo_latitude</wp:meta_key>
    <wp:meta_value><![CDATA[28.6139391]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_longitude</wp:meta_key>
    <wp:meta_value><![CDATA[77.20902120000005]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_address</wp:meta_key>
    <wp:meta_value><![CDATA[New Delhi, Delhi, India]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Talk with code by PCbots</title>
  <link>https://fzeesblog.wordpress.com/talk-with-code-by-pcbots/</link>
  <pubDate>Fri, 10 Apr 2015 15:00:08 +0000</pubDate>
  <dc:creator>feroz29</dc:creator>
  <guid isPermaLink="false">http://fzeesblog.files.wordpress.com/2015/04/talk-with-code-by-pcbots.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>13</wp:post_id>
  <wp:post_date>2015-04-10 15:00:08</wp:post_date>
  <wp:post_date_gmt>2015-04-10 15:00:08</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>talk-with-code-by-pcbots</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://fzeesblog.files.wordpress.com/2015/04/talk-with-code-by-pcbots.png</wp:attachment_url>
</item>
<item>
  <title>program-hd-wallpapers-798x350</title>
  <link>https://fzeesblog.wordpress.com/program-hd-wallpapers-798x350/</link>
  <pubDate>Fri, 10 Apr 2015 15:00:10 +0000</pubDate>
  <dc:creator>feroz29</dc:creator>
  <guid isPermaLink="false">http://fzeesblog.files.wordpress.com/2015/04/program-hd-wallpapers-798x350.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>14</wp:post_id>
  <wp:post_date>2015-04-10 15:00:10</wp:post_date>
  <wp:post_date_gmt>2015-04-10 15:00:10</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>program-hd-wallpapers-798x350</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://fzeesblog.files.wordpress.com/2015/04/program-hd-wallpapers-798x350.jpg</wp:attachment_url>
</item>
<item>
  <title>SPOJ</title>
  <link>https://fzeesblog.wordpress.com/spoj/</link>
  <pubDate>Fri, 10 Apr 2015 20:11:47 +0000</pubDate>
  <dc:creator>feroz29</dc:creator>
  <guid isPermaLink="false">https://fzeesblog.wordpress.com/?page_id=24</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>24</wp:post_id>
  <wp:post_date>2015-04-10 20:11:47</wp:post_date>
  <wp:post_date_gmt>2015-04-10 20:11:47</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>spoj</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[82754425]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>cropped-back11.jpg</title>
  <link>https://fzeesblog.wordpress.com/cropped-back11-jpg/</link>
  <pubDate>Sat, 11 Apr 2015 15:04:19 +0000</pubDate>
  <dc:creator>feroz29</dc:creator>
  <guid isPermaLink="false">http://fzeesblog.files.wordpress.com/2015/04/cropped-back11.jpg</guid>
  <description/>
  <content:encoded><![CDATA[http://fzeesblog.files.wordpress.com/2015/04/cropped-back11.jpg]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>33</wp:post_id>
  <wp:post_date>2015-04-11 15:04:19</wp:post_date>
  <wp:post_date_gmt>2015-04-11 15:04:19</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>cropped-back11-jpg</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://fzeesblog.files.wordpress.com/2015/04/cropped-back11.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_custom_header_last_used_pub/hemingway-rewritten</wp:meta_key>
    <wp:meta_value><![CDATA[1428764678]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_context</wp:meta_key>
    <wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_is_custom_header</wp:meta_key>
    <wp:meta_value><![CDATA[pub/hemingway-rewritten]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Inversion Count - SPOJ</title>
  <link>https://fzeesblog.wordpress.com/2015/04/11/invcnt/</link>
  <pubDate>Sat, 11 Apr 2015 17:41:27 +0000</pubDate>
  <dc:creator>feroz29</dc:creator>
  <guid isPermaLink="false">https://fzeesblog.wordpress.com/?p=43</guid>
  <description/>
  <content:encoded><![CDATA[In the Question <a href="http://www.spoj.com/problems/INVCNT/">Inversion Count</a> - INVCNT on spoj, you need to print the no. of inversion pairs. The question defines it as - "Let A[0...n - 1] be an array of n distinct positive integers. If i &lt; j and A[i] &gt; A[j] then the pair (i, j) is called an inversion of A." So basically an inversion pair is the one in which if indices and the values have invert relation. ( if one is &gt; the other is &lt; ).

The first basic approach which comes to mind is simple Brute Force algo. That is selecting one element(let it be i th) in the array and then checking all the elements ( j index for that matter) after the selected element for the condition Arr[i]&gt;Arr[j], if such pair occurs then count++. But time complexity of this approach is O(n<sup>2</sup>).

But submitting this solution will lead to TLE (time limit exceeded).

So we need to use some other algo, and the solution uses Merge Function in Merge Sort Algorithm.

Actually when we merge the two sorted array, while comparing elements we can perform the counting of inversion pairs. This can be done as : (for ascending order sorting) When the current element under consideration in right sub-array is smaller than current element under consideration in left sub-array the no of inversion pairs equals to the no. of all the elements after the current element in left sub-array (including itself), in each level of merge sort. Sum of all these pairs will be equal to inversion pairs.

This can be understood using following :

<a href="https://fzeesblog.files.wordpress.com/2015/04/img_20150411_231458239_hdr.jpg"><img class="alignnone size-medium wp-image-48" src="https://fzeesblog.files.wordpress.com/2015/04/img_20150411_231458239_hdr.jpg?w=262" alt="IMG_20150411_231458239_HDR" width="655px" height="750px" /></a>

Here is the following pseudo-code :

[code language="cpp"]
#include &lt;iostream&gt;
typedef long long int typex;
using namespace std;
long long int count,arr[200001];
void merge(typex p,typex q,typex r)
{

	//first array has indices from p to q
	//second array has indices from q to p
    typex i,li,ri,n1,n2;
    n1=q-p+1;
    n2=r-q;
    typex *lt= new typex [n1];
    typex *rt= new typex [n2];//[q-(r+1)+1]
    // HERE copy both the arrays in the newly dynamically allocated array.
    //left and right array is ready which is all ready sorted
    //now we will merge
    //indices fr left copy and right copy respectively
    li=ri=0;
    i=p;//index for array being sorted
    while(li&lt;n1 &amp;&amp; ri&lt;n2)
    {
        if(lt[li]&gt;rt[ri])
        {
            arr[i++]=rt[ri++];
            count=count+n1-li;// MAIN STEP
        }
         else //right hand side elemnt is greater that is inversion pair
        {
            arr[i++]=lt[li++];
        }
    }
//inversion pairs have been counted till this stage, do not count again;
    while(li&lt;n1)
        arr[i++]=lt[li++];
    while(ri&lt;n2)
        arr[i++]=rt[ri++];
}
void mergesort(typex p,typex r)
{
    if(p&lt;r)
    {
        typex q=(p+r)/2;
        mergesort(p,q);
        mergesort(q+1,r);
        merge(p,q,r);
    }
}
int main()
{
   ////Write code accordingly
        count=0;
        mergesort(0,n-1);
        cout&amp;lt;&amp;lt;&quot;\n&quot;&amp;lt;&amp;lt;count;
	////

}

[/code]

Complete Solution : https://ideone.com/UBCpT9]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>43</wp:post_id>
  <wp:post_date>2015-04-11 17:41:27</wp:post_date>
  <wp:post_date_gmt>2015-04-11 17:41:27</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>invcnt</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>1</wp:is_sticky>
  <category domain="category" nicename="algorithms"><![CDATA[Algorithms]]></category>
  <category domain="post_tag" nicename="invcount"><![CDATA[INVCOUNT]]></category>
  <category domain="post_tag" nicename="inversion-count"><![CDATA[INVERSION COUNT]]></category>
  <category domain="post_tag" nicename="inversion-pairs"><![CDATA[INVERSION PAIRS]]></category>
  <category domain="post_tag" nicename="merge-sort"><![CDATA[MERGE SORT]]></category>
  <category domain="post_tag" nicename="solution-spoj"><![CDATA[SOLUTION SPOJ]]></category>
  <category domain="post_tag" nicename="spoj-invcnt"><![CDATA[SPOJ INVCNT]]></category>
  <category domain="post_tag" nicename="spoj-inversion-count"><![CDATA[SPOJ INVERSION COUNT]]></category>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[82754425]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[12836552316]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>IMG_20150411_231458239_HDR</title>
  <link>https://fzeesblog.wordpress.com/2015/04/11/invcnt/img_20150411_231458239_hdr/</link>
  <pubDate>Sat, 11 Apr 2015 17:59:33 +0000</pubDate>
  <dc:creator>feroz29</dc:creator>
  <guid isPermaLink="false">http://fzeesblog.files.wordpress.com/2015/04/img_20150411_231458239_hdr.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>48</wp:post_id>
  <wp:post_date>2015-04-11 17:59:33</wp:post_date>
  <wp:post_date_gmt>2015-04-11 17:59:33</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>img_20150411_231458239_hdr</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>43</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://fzeesblog.files.wordpress.com/2015/04/img_20150411_231458239_hdr.jpg</wp:attachment_url>
</item>
<item>
  <title>QUICK SORT</title>
  <link>https://fzeesblog.wordpress.com/2015/04/20/quick-sort/</link>
  <pubDate>Mon, 20 Apr 2015 05:46:36 +0000</pubDate>
  <dc:creator>feroz29</dc:creator>
  <guid isPermaLink="false">https://fzeesblog.wordpress.com/?p=55</guid>
  <description/>
  <content:encoded><![CDATA[The basic outline of the Quick Sort function is to :

1) Find a pivot, place it on correct position(let index be p) in the array(index : s to l ). This will be achieved by a partition function.

2) Quick Sort the sub array (s to p-1).

3) Quick Sort the sub array (p+1 to l).

I have implemented the following code with 2 partition functions :

1st based on <a href="http://en.wikipedia.org/wiki/Quicksort#Algorithm" target="_blank">Wikipedia's Algo</a>

2nd based on <a href="https://www.youtube.com/watch?v=3OLTJlwyIqQ" target="_blank">###</a>

[code]
#include &lt;iostream&gt;
#include &lt;time.h&gt;
using namespace std;
clock_t total_elapsed_time = 0;

int partition(int *arr,int s,int l);

void qsort(int *arr,int s,int l)
{
    int x=partition(arr,s,l);
    if(s&lt;x-1)
    qsort(arr, s, x-1);
    if(x+1&lt;l)
    qsort(arr,x+1,l);
}
int partition(int *arr,int s,int l)
{
    clock_t call_begin = clock();
    int pivot;
    int pval;
    int i,j,temp;

    // ALGO 1 for partition function
    i=s;j=s;
    //i traverses over the array
    //j resides over the element &gt; arr[pivot]
        pval=arr[l];
        pivot=l;
    while(i&lt;l)
    {
        if(arr[i]&lt;pval)
        {
            temp=arr[i];
            arr[i]=arr[j];
            arr[j++]=temp;
        }
        i++;
    }
    temp=arr[l];
    arr[l]=arr[j];
    arr[j]=temp;
    total_elapsed_time+=(clock()-call_begin);
    return j;

    //ALGO 2 for partition function.
    /*
    i=s;j=l;
    pivot=s;
    pval=arr[pivot];
    while(i&lt;j)
    {
        if(pivot==i)
        {
            //make comparision with value at j
            if(!(pval&lt;arr[j]))
            {
                //swap
                temp=arr[j];
                arr[j]=arr[i];
                arr[i]=temp;
                //pivot value has been shifted to arr[j]
                pivot=j;
                //now at ith position we have an element we just swapped with pivot, so move ahead at i
                i++;
            }
            else
                j--;
        }
        else
        {
            //this is for pivot==j
            if(!(pval&gt;arr[i]))
            {
                //swap
                temp=arr[j];
                arr[j]=arr[i];
                arr[i]=temp;
                //pivot value has been shifted to arr[i]
                pivot=i;
                //now at jth position we have an element we just swapped with pivot, so move ahead(left) at j
                j--;

            }
            else
                i++;
        }

    }

    total_elapsed_time+=(clock()-call_begin);
    return i;
    */
}
int main()
{
    int i,arr[100],n,t;
    cin&gt;&gt;t;
    while(t--)
    {
        total_elapsed_time=0;
        cin&gt;&gt;n;
        for(i=0;i&lt;n;i++)
        {
            cin&gt;&gt;arr[i];
        }
        qsort(arr,0,n-1);
        for(i=0;i&lt;n;i++)
            cout&lt;&lt;arr[i]&lt;&lt;&quot;\t&quot;;
        cout&lt;&lt;&quot;\n\nTOTAL TIME ELAPSED in PARTITION FUNCTION : &quot;&lt;&lt;float(total_elapsed_time)/CLOCKS_PER_SEC;
    }

    return 0;
}


[/code]
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>55</wp:post_id>
  <wp:post_date>2015-04-20 05:46:36</wp:post_date>
  <wp:post_date_gmt>2015-04-20 05:46:36</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>quick-sort</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="algorithms"><![CDATA[Algorithms]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Algorithms</title>
  <link>https://fzeesblog.wordpress.com/algo/</link>
  <pubDate>Mon, 20 Apr 2015 05:48:45 +0000</pubDate>
  <dc:creator>feroz29</dc:creator>
  <guid isPermaLink="false">https://fzeesblog.wordpress.com/?page_id=56</guid>
  <description/>
  <content:encoded><![CDATA[Sorting Alogrithms

&nbsp;
<table style="width:100%;">
<tbody>
<tr>
<th>Type</th>
<th>Complexity</th>
</tr>
<tr>
<td><a href="https://fzeesblog.wordpress.com/2015/04/20/quick-sort/">Quick Sort</a></td>
<td>O(n log n)</td>
</tr>
<tr>
<td><a href="https://fzeesblog.wordpress.com/2016/04/10/shell-sort/">Shell Sort</a></td>
<td>O(n<sup>2</sup>)</td>
</tr>

<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>

Graph Algorithms

&nbsp;
<table style="width:100%;">
<tbody>
<tr>
<th>Type</th>
<th>Complexity</th>
</tr>
<tr>
<td><a href="https://fzeesblog.wordpress.com/2016/03/24/dijkstras-algorithm-shortest-path/">Dijkstra's Algorithm</a></td>
<td><a href="https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm#Running_time">varies</a></td>
</tr>

</tbody>
</table>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>56</wp:post_id>
  <wp:post_date>2015-04-20 05:48:45</wp:post_date>
  <wp:post_date_gmt>2015-04-20 05:48:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>algo</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[82754425]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Data Structures</title>
  <link>https://fzeesblog.wordpress.com/data-structures/</link>
  <pubDate>Mon, 20 Apr 2015 05:53:02 +0000</pubDate>
  <dc:creator>feroz29</dc:creator>
  <guid isPermaLink="false">https://fzeesblog.wordpress.com/?page_id=72</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>72</wp:post_id>
  <wp:post_date>2015-04-20 05:53:02</wp:post_date>
  <wp:post_date_gmt>2015-04-20 05:53:02</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>data-structures</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[82754425]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Reading integer input from a text file in C</title>
  <link>https://fzeesblog.wordpress.com/2015/07/18/reading-integer-input-from-a-text-file-in-c/</link>
  <pubDate>Sat, 18 Jul 2015 04:00:50 +0000</pubDate>
  <dc:creator>feroz29</dc:creator>
  <guid isPermaLink="false">https://fzeesblog.wordpress.com/?p=80</guid>
  <description/>
  <content:encoded><![CDATA[Many times you need to read from a text file in order to take input.

So here is one of the way :

I have used the function <a href="http://www.tutorialspoint.com/c_standard_library/c_function_fscanf.htm">fscanf()</a>.

&nbsp;

[code language="cpp"]
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
int main()
{
	FILE *textfile=fopen(&quot;IntegerArray.txt&quot;,&quot;r&quot;);
	int arr[100050],i,lim,num;
	if (textfile == NULL)
    {
        printf(&quot;Error Reading File\n&quot;);
        exit (0);
    }
    i=0;
	while(fscanf(textfile, &quot;%d&quot;, &amp;num) &gt;0 )
	{
		arr[i++]=num;
	}
    lim=i;
    printf(&quot;\n Lim : %d \n&quot;,lim);

    for (i = 0; i &lt; lim; i++)
    {
           printf(&quot;%d : %d\n&quot;,i, arr[i]);
    }
    fclose(textfile);
    return 0;

}
[/code]
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>80</wp:post_id>
  <wp:post_date>2015-07-18 04:00:50</wp:post_date>
  <wp:post_date_gmt>2015-07-18 04:00:50</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>reading-integer-input-from-a-text-file-in-c</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[82754425]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[12836436459]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Knuth–Morris–Pratt (KMP) algorithm</title>
  <link>https://fzeesblog.wordpress.com/2015/08/09/kmp-algorithm/</link>
  <pubDate>Sun, 09 Aug 2015 16:55:12 +0000</pubDate>
  <dc:creator>feroz29</dc:creator>
  <guid isPermaLink="false">https://fzeesblog.wordpress.com/?p=89</guid>
  <description/>
  <content:encoded><![CDATA[KMP is a pattern matching algorithm which has very good running time.

Firstly, what is the <strong>naive approach</strong> solution for pattern matching ? Answer to this question will lead to the key idea behind the KMP algo.

How you go about matching a pattern with a text ? You might search  the first character of the pattern in the text, and after finding that you will try to match the other sequentially appearing characters in  the pattern till you match all or find a mismatch. Bravo, if you find a match but what if you didn't. You will go back to the point where your first character matched. And start the same procedure from the character next to the first match. This can be seen in the following example : <a href="https://fzeesblog.files.wordpress.com/2015/08/20150809_221842.jpg"><img class="alignright size-large wp-image-95" src="https://fzeesblog.files.wordpress.com/2015/08/20150809_221842.jpg?w=676" alt="Patterrn Matching Naive" width="676" height="870" /></a>

There is an annoying step which we perform if we find a mismatch, that is going BACK to the first character of match. The KMP algo improves the worst time complexity significantly just by eliminating this step of going backwards. Obviously, no one likes to step backwards :P

Key Concept of KMP algo :

The KMP matching algorithm uses degenerating property - pattern having same subpatterns appearing more than once in the pattern. The algorithm first creates an integer array of size same as that of the pattern and stores some useful information after computing on the text, which it then uses while matching the pattern with the text.

KMP algorithm does some preprocessing over the pattern pat[] and constructs an auxiliary array lps[] of size same as size of pattern (=m). <strong>lps = longest proper prefix which is also suffix.</strong> For each sub-pattern pat[0…i] where i = 0 to m-1, lps[i] stores length of the maximum matching proper prefix which is also a suffix of the sub-pattern pat[0..i].

For Example :

Let Pattern be FFZFFZFFF :

for i=0 : "F" - Proper prefix = "" and

Proper Suffix = ""                                        lps[0]=0

for i=1 : "FF" - Proper prefix = "F" and

Proper Suffix = "F"

Longest common prefix which is also a suffix = "F" ie length  1, thus lps[1]=1

for i=2: "FFZ" - Proper prefix = "F","FF" and

Proper Suffix = "Z","FZ"                                      thus lps[2]=0

for i=3: "FFZF" - Proper prefix = "F","FF","FFZ" and

Proper Suffix = "F","ZF", "FZF"                                      thus lps[3]=1

for i=4: "FFZFF" - Proper prefix = "F","FF","FFZ","FFZF" and

Proper Suffix = "F","FF"ZFF", "FZFF"                                      thus lps[3]=2 (as longest common is "FF")

for i=5: "FFZFFZ" - Proper prefix = "F","FF","FFZ","FFZF","FFZFF" and

Proper Suffix = "Z","FZ"FFZ", "ZFFZ","FZFFZ"                                      thus lps[4]=3 (as longest common is "FFZ")

Similarly lps[i] can be carried out for  whole pattern.

Now this lps[] array is used while matching patterns.

**********

[code]
Pseudocode Code for Function to create lps array
Function    create_lps( pat,  size) :
    lps[0]=0
    INITIALIZE i=1 and j=0
    WHILE i &lt; PATTERN.LENGTH:

        if PATTERN at i == PATTERN at j :
            lps[i]=j+1
            i++ and j++ //MOVE i and j ahead

        else //MISMATCH
            if j &gt; 0:
                j=lps[j-1];
            else //when j stands at 0
                //NO PART OF PATTERN till i, HAS LPS
                lps[i]=0
                i++

Pseudocode Code for Function to check pattern
Function KMP_chk():
	WHILE i &lt; TEXT.LENGTH :
		if TEXT at i == PATTERN at j :
			i++ and j++
		else
			if mismatch occurs at j&gt;0
				j=lps[j-1];		//THIS IS THE STEP WHICH AVOIDS GOING BACK TO
			else
                                i++;

		if j== PATTERN.LENGTH	//THAT MEANS TEXT at i == PATTERN at j executed j times only because it matches the pattern
			//PATTERN MATCH FOUND, STORE AND FIND MORE OCCURANCES.

[/code]

Here is the C++ implementation code

[code language="cpp"]
#include &lt;iostream&gt;
using namespace std;
int lens(char *s)
{
    int i;
    for(i=0;s[i]!=0;i++);
    return i;
}
void createlps(char *pat, int *lps, int size)
{
    int i,j;
    lps[0]=0;
    i=1;j=0;
    while(i&lt;size)
    {
        if(pat[i]==pat[j])
        {
            lps[i]=j+1;
            i++;j++;
        }
        else
        {
            if(j&gt;0)
            	j=lps[j-1];
            else
            {
	        lps[i]=0;
                i++;
            }
        }
    }
}

void checkoccurances(char *text, char *pat, int *lps, int sizep, int *occurances)
{
    int i,j,k;
    i=0;k=0;j=0;
    while(text[i]!=0)
    {
        if(pat[j]==text[i])
        {
            i++;
            j++;
        }
        else
        {
                if(j&gt;0)
                    j=lps[i-1];
                else
                    i++;
        }
        if(j==sizep)
        {
            occurances[k++]=i-sizep;
            j=0;
        }
    }
    occurances[k]=-1;
}

int main() {
    char text[5000],pat[50];
    int i,occurances[50];

    cout&lt;&lt;&quot;Enter the text : &quot;;
    cin&gt;&gt;text;
    cout&lt;&lt;&quot;Enter the pattern : &quot;;
    cin&gt;&gt;pat;

    int patlen=lens(pat);
    int *lps= new int [patlen];
    createlps(pat,lps,patlen);
    checkoccurances(text,pat,lps,patlen,occurances);

	cout&lt;&lt;&quot;\n \nOccurances are at indices :&quot;;
    for(i=0;occurances[i]!=-1;i++)
    	cout&lt;&lt;occurances[i]&lt;&lt;&quot;   &quot;;
cin.ignore();
    cin.get();
    return 0;
}
[/code]

Note the similarity in the code of createlps() and checkoccurances()]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>89</wp:post_id>
  <wp:post_date>2015-08-09 16:55:12</wp:post_date>
  <wp:post_date_gmt>2015-08-09 16:55:12</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>kmp-algorithm</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="algorithms"><![CDATA[Algorithms]]></category>
  <category domain="post_tag" nicename="kmp"><![CDATA[KMP]]></category>
  <category domain="post_tag" nicename="pattern-matching"><![CDATA[Pattern Matching]]></category>
  <category domain="post_tag" nicename="string-matching"><![CDATA[String Matching]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[82754425]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[13560286314]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Patterrn Matching Naive</title>
  <link>https://fzeesblog.wordpress.com/2015/08/09/kmp-algorithm/_20150809_221842/</link>
  <pubDate>Sun, 09 Aug 2015 16:53:18 +0000</pubDate>
  <dc:creator>feroz29</dc:creator>
  <guid isPermaLink="false">http://fzeesblog.files.wordpress.com/2015/08/20150809_221842.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>95</wp:post_id>
  <wp:post_date>2015-08-09 16:53:18</wp:post_date>
  <wp:post_date_gmt>2015-08-09 16:53:18</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>_20150809_221842</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>89</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://fzeesblog.files.wordpress.com/2015/08/20150809_221842.jpg</wp:attachment_url>
</item>
<item>
  <title>Boyer-Moore's Voting Algorithm</title>
  <link>https://fzeesblog.wordpress.com/2015/08/15/boyer-moores-voting-algorithm/</link>
  <pubDate>Sat, 15 Aug 2015 18:18:45 +0000</pubDate>
  <dc:creator>feroz29</dc:creator>
  <guid isPermaLink="false">https://fzeesblog.wordpress.com/?p=109</guid>
  <description/>
  <content:encoded><![CDATA[Moore's Voting algorithm has 2 parts -

1. First part of running Moore's Voting algorithm only gives you A candidate which occurs "most" of the time in the given array.
2. In the second part, we need to iterate over the array once again to determine if this candidate occurs maximum number of times (i.e. greater than size/2 times).

First iteration is to find the candidate &amp; second iteration is to check if this element occurs majority of times in the given array.

So time complexity is: O(n) + O(n) ≈ O(n)

---------------------------------------------------------

<em><strong>1.Finding a Candidate:</strong></em>
The algorithm for first phase that works in O(n) is known as Moore’s Voting Algorithm. Basic idea of the algorithm is if we cancel out each occurrence of an element e with all the other elements that are different from e then e will exist till end if it is a majority element.

findCandidate(a[], size)
1. Initialize index and count of majority element
maj_index = 0, count = 1
2. Loop for i = 1 to size – 1
(a)If count == 0
maj_index = i;
count = 1

(b)If a[maj_index] == a[i]
count++
(c)Else
count--;

3. Return a[maj_index]

--
<em><strong>2. Check if the element obtained in step 1 is majority</strong></em>

printMajority (a[], size)
1. Find the candidate for majority
2. If candidate is majority. i.e., appears more than n/2 times.
Print the candidate
3. Else
Print "NONE"]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>109</wp:post_id>
  <wp:post_date>2015-08-15 18:18:45</wp:post_date>
  <wp:post_date_gmt>2015-08-15 18:18:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>boyer-moores-voting-algorithm</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="algorithms"><![CDATA[Algorithms]]></category>
  <category domain="post_tag" nicename="boyer"><![CDATA[BOYER]]></category>
  <category domain="post_tag" nicename="majority"><![CDATA[MAJORITY]]></category>
  <category domain="post_tag" nicename="moore"><![CDATA[MOORE]]></category>
  <category domain="category" nicename="spoj"><![CDATA[Spoj]]></category>
  <category domain="post_tag" nicename="spoj-major"><![CDATA[SPOJ MAJOR]]></category>
  <category domain="post_tag" nicename="voting"><![CDATA[VOTING]]></category>
  <category domain="post_tag" nicename="voting-algo"><![CDATA[VOTING ALGO]]></category>
  <category domain="post_tag" nicename="voting-algorithm"><![CDATA[VOTING ALGORITHM]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[82754425]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[13761718915]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>File IO Operations in C++</title>
  <link>https://fzeesblog.wordpress.com/2015/08/20/file-io-cplusplus/</link>
  <pubDate>Thu, 20 Aug 2015 18:53:51 +0000</pubDate>
  <dc:creator>feroz29</dc:creator>
  <guid isPermaLink="false">https://fzeesblog.wordpress.com/?p=111</guid>
  <description/>
  <content:encoded><![CDATA[Source : <a href="http://www.cplusplus.com/doc/tutorial/files/">http://www.cplusplus.com/doc/tutorial/files/</a>

<hr />

I am just trying to keep the reading material organised for people and myself, I state that I do not own the following article).

<hr />

C++ provides the following classes to perform output and input of characters to/from files:
<ul>
	<li><b><code><a href="http://www.cplusplus.com/ofstream">ofstream</a></code>:</b> Stream class to write on files</li>
	<li><b><code><a href="http://www.cplusplus.com/ifstream">ifstream</a></code>:</b> Stream class to read from files</li>
	<li><b><code><a href="http://www.cplusplus.com/fstream">fstream</a></code>:</b> Stream class to both read and write from/to files.</li>
</ul>
For  writing into a file we declare an object of class ofstream and for reading a file object of class ifstream. Steps are as follows :
<ol>
	<li>Creating stream object.</li>
	<li>Opening the file</li>
	<li>Performing tasks (Reading/Writing)</li>
	<li>Closing the file</li>
</ol>

<hr />

1. Creating Object
<pre><code>ofstream myfile; //to write
//or
ifstream myfile; //to read</code></pre>
2. Opening File
<pre><code>ofstream myfile;
myfile.open (<kbd>"example.bin"</kbd>, ios::out | ios::app | ios::binary); 
</code>/*
<code>open (filename, mode);
</code>Where <code>filename</code> is a string representing the name of the file to be opened, and <code>mode</code> is an optional parameter with a combination of the following flags
*/</pre>
Combining step 1 and step 2,
<pre><code>ofstream myfile (<kbd>"example.bin"</kbd>, ios::out | ios::app | ios::binary);
//Using the benefit of the contructor for the class ofstream</code></pre>
&nbsp;
<table style="height:389px;" width="822">
<tbody>
<tr>
<th>Member constant</th>
<th>Opening mode</th>
</tr>
<tr>
<td>app</td>
<td>(<b>app</b>end) Set the stream's position indicator to the end of the stream before each output operation.</td>
</tr>
<tr>
<td>ate</td>
<td>(<b>at e</b>nd) Set the stream's position indicator to the end of the stream on opening.</td>
</tr>
<tr>
<td>binary</td>
<td>(<b>binary</b>) Consider stream as binary rather than text.</td>
</tr>
<tr>
<td>in</td>
<td>(<b>in</b>put) Allow input operations on the stream.</td>
</tr>
<tr>
<td>out</td>
<td>(<b>out</b>put) Allow output operations on the stream.</td>
</tr>
<tr>
<td>trunc</td>
<td>(<b>trunc</b>ate) Any current content is discarded, assuming a length of zero on opening.</td>
</tr>
</tbody>
</table>
&nbsp;

For <code>ifstream</code> and <code>ofstream</code> classes, <code>ios::in</code> and <code>ios::out</code> are automatically and respectively assumed, even if a mode that does not include them is passed as second argument to the <code>open</code> member function (the flags are combined).

For <code>fstream</code>, the default value is only applied if the function is called without specifying any value for the mode parameter. If the function is called with any value in that parameter the default mode (which is both input and output) is overridden, not combined.

To check if a file stream was successful opening a file, you can do it by calling to member <code>is_open</code>. This member function returns a<code>bool</code> value of <code>true</code> in the case that indeed the stream object is associated with an open file, or <code>false</code> otherwise:
<pre><code><var>if</var> (myfile.is_open()) { <cite>/* ok, proceed with output */</cite> }</code></pre>

<hr />

3. Performing Operations

Text Files
<pre><code><cite>// writing on a text file</cite>
#include &lt;iostream&gt;
#include &lt;fstream&gt;
<var>using</var> <var>namespace</var> std;

<var>int</var> main () {
  ofstream myfile (<kbd>"example.txt"</kbd>);
  <var>if</var> (myfile.is_open())
  {
    myfile &lt;&lt; <kbd>"This is a line.\n"</kbd>;
    myfile &lt;&lt; <kbd>"This is another line.\n"</kbd>;
    myfile.close();
  }
  <var>else</var> cout &lt;&lt; <kbd>"Unable to open file"</kbd>;
  <var>return</var> 0;
}</code></pre>
<pre><code><cite>// reading a text file</cite>
#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;string&gt;
<var>using</var> <var>namespace</var> std;

<var>int</var> main () {
  string line;
  ifstream myfile (<kbd>"example.txt"</kbd>);
  <var>if</var> (myfile.is_open())
  {
    <var>while</var> ( getline (myfile,line) )
    {
      cout &lt;&lt; line &lt;&lt; <kbd>'\n'</kbd>;
    }
    myfile.close();
  }

  <var>else</var> cout &lt;&lt; <kbd>"Unable to open file"</kbd>; 

  <var>return</var> 0;
}</code></pre>

<hr />

&nbsp;

get and put stream objects:

<code>ifstream</code>, like <code>istream</code>, keeps an internal <i>get position</i> with the location of the element to be read in the next input operation.

<code>ofstream</code>, like <code>ostream</code>, keeps an internal <i>put position</i> with the location where the next element has to be written.

Finally, <code>fstream</code>, keeps both, the <i>get</i> and the <i>put position</i>, like <code>iostream</code>.

These internal stream positions point to the locations within the stream where the next reading or writing operation is performed.
<h4>tellg() and tellp()</h4>
no parameters return a value of the member type <code>streampos</code>,  the current <i>get position</i> (in the case of <code>tellg</code>) or the <i>put position</i> (in the case of <code>tellp</code>).
<h4>seekg() and seekp()</h4>
allow to change the location of the <i>get</i> and <i>put positions</i>. Both functions are overloaded with two different prototypes. The first form is:

<code>seekg ( position );
seekp ( position );
</code>
Using this prototype, the stream pointer is changed to the absolute position <code>position</code> (counting from the beginning of the file). The type for this parameter is <code>streampos</code>, which is the same type as returned by functions <code>tellg</code> and <code>tellp</code>.

The other form for these functions is:

<code>seekg ( offset, direction );
seekp ( offset, direction );
</code>
Using this prototype, the <i>get</i> or <i>put position</i> is set to an offset value relative to some specific point determined by the parameter <code>direction</code>. <code>offset</code> is of type <code>streamoff</code>. And <code>direction</code> is of type <code>seekdir</code>, which is an <i>enumerated type</i> that determines the point from where offset is counted from, and that can take any of the following values:
<table class="boxed">
<tbody>
<tr>
<td><code>ios::beg</code></td>
<td>offset counted from the beginning of the stream</td>
</tr>
<tr>
<td><code>ios::cur</code></td>
<td>offset counted from the current position</td>
</tr>
<tr>
<td><code>ios::end</code></td>
<td>offset counted from the end of the stream</td>
</tr>
</tbody>
</table>
&nbsp;

<hr />

&nbsp;

Binary Files

For binary files, reading and writing data with the extraction and insertion operators (<code>&lt;&lt;</code> and <code>&gt;&gt;</code>) and functions like <code>getline</code> is not efficient, since we do not need to format any data and data is likely not formatted in lines.

File streams include two member functions specifically designed to read and write binary data sequentially: <code>write</code> and <code>read</code>. The first one (<code>write</code>) is a member function of <code>ostream</code> (inherited by <code>ofstream</code>). And <code>read</code> is a member function of <code>istream</code> (inherited by<code>ifstream</code>). Objects of class <code>fstream</code> have both. Their prototypes are:

<tt>write ( memory_block, size );
read ( memory_block, size );</tt>

&nbsp;
<pre><code><cite>// obtaining file size</cite>
#include &lt;iostream&gt;
#include &lt;fstream&gt;
<var>using</var> <var>namespace</var> std;

<var>int</var> main () {
  streampos begin,end;
  ifstream myfile (<kbd>"example.bin"</kbd>, ios::binary);
  begin = myfile.tellg();
  myfile.seekg (0, ios::end);
  end = myfile.tellg();
  myfile.close();
  cout &lt;&lt; <kbd>"size is: "</kbd> &lt;&lt; (end-begin) &lt;&lt; <kbd>" bytes.\n"</kbd>;
  <var>return</var> 0;
}</code></pre>
<pre><code><cite>// reading an entire binary file</cite>
#include &lt;iostream&gt;
#include &lt;fstream&gt;
<var>using</var> <var>namespace</var> std;

<var>int</var> main () {
  streampos size;
  <var>char</var> * memblock;

  ifstream file (<kbd>"example.bin"</kbd>, ios::in|ios::binary|ios::ate);
  <var>if</var> (file.is_open())
  {
    size = file.tellg();
    memblock = <var>new</var> <var>char</var> [size];//we request the allocation of a memory block large enough to hold the entire file
    file.seekg (0, ios::beg);
    file.read (memblock, size);
    file.close();

    cout &lt;&lt; <kbd>"the entire file content is in memory"</kbd>;

    <var>delete</var>[] memblock;
  }
  <var>else</var> cout &lt;&lt; <kbd>"Unable to open file"</kbd>;
  <var>return</var> 0;
}
</code></pre>
&nbsp;

&nbsp;

<hr />

4. Closing a file

Once this member function is called, the stream object can be re-used to open another file, and the file is available again to be opened by other processes.
<pre><code>myfile.close();</code></pre>
In case that an object is destroyed while still associated with an open file, the destructor automatically calls the member function <code>close</code>.

<hr />

Concept of Buffer and Syncronization

<section id="buffers_and_sync">When we operate with file streams, these are associated to an internal buffer object of type <code>streambuf</code>. This buffer object may represent a memory block that acts as an intermediary between the stream and the physical file. For example, with an <code>ofstream</code>, each time the member function <code>put</code> (which writes a single character) is called, the character may be inserted in this intermediate buffer instead of being written directly to the physical file with which the stream is associated.The operating system may also define other layers of buffering for reading and writing to files.

When the buffer is flushed, all the data contained in it is written to the physical medium (if it is an output stream). This process is called <i>synchronization</i> and takes place under any of the following circumstances:
<ul>
	<li><b>When the file is closed:</b> before closing a file, all buffers that have not yet been flushed are synchronized and all pending data is written or read to the physical medium.</li>
	<li><b><em>When the buffer is full</em>:</b> Buffers have a certain size. When the buffer is full it is automatically synchronized.</li>
	<li><b>Explicitly, with manipulators:</b> When certain manipulators are used on streams, an explicit synchronization takes place. These manipulators are: <code><a href="http://www.cplusplus.com/flush">flush</a></code> and <code><a href="http://www.cplusplus.com/endl">endl</a></code>.</li>
	<li><b><em>Explicitly, with member function sync()</em>:</b> Calling the stream's member function <code>sync()</code> causes an immediate synchronization. This function returns an <code>int</code> value equal to <tt>-1</tt> if the stream has no associated buffer or in case of failure. Otherwise (if the stream buffer was successfully synchronized) it returns <code>0</code>.</li>
</ul>
</section>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>111</wp:post_id>
  <wp:post_date>2015-08-20 18:53:51</wp:post_date>
  <wp:post_date_gmt>2015-08-20 18:53:51</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>file-io-cplusplus</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[82754425]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[13925267264]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>C/C++</title>
  <link>https://fzeesblog.wordpress.com/cc/</link>
  <pubDate>Thu, 20 Aug 2015 18:36:55 +0000</pubDate>
  <dc:creator>feroz29</dc:creator>
  <guid isPermaLink="false">https://fzeesblog.wordpress.com/?page_id=118</guid>
  <description/>
  <content:encoded><![CDATA[<table>
<tbody>
<tr>
<td>FAST IO</td>
<td><a href="https://fzeesblog.wordpress.com/2015/10/18/comparing-input-functions-for-spoj-input-intensive-problem-intest/"> Fast Input for Input intensive problems</a></td>
</tr>
<tr>
<td>FILE IO C</td>
<td><a href="https://fzeesblog.wordpress.com/2015/07/18/reading-integer-input-from-a-text-file-in-c/">Reading integer input from Text File</a></td>
</tr>
<tr>
<td>FILE IO C++</td>
<td><a href="https://fzeesblog.wordpress.com/2015/08/20/file-io-cplusplus/">Short Article on IO in C++</a></td>
</tr>
</tbody>
</table>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>118</wp:post_id>
  <wp:post_date>2015-08-20 18:36:55</wp:post_date>
  <wp:post_date_gmt>2015-08-20 18:36:55</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>cc</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[82754425]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Comparing Input Functions for SPOJ input intensive problem : INTEST</title>
  <link>https://fzeesblog.wordpress.com/2015/10/18/comparing-input-functions-for-spoj-input-intensive-problem-intest/</link>
  <pubDate>Sun, 18 Oct 2015 21:06:35 +0000</pubDate>
  <dc:creator>feroz29</dc:creator>
  <guid isPermaLink="false">https://fzeesblog.wordpress.com/?p=124</guid>
  <description/>
  <content:encoded><![CDATA[I tried the problem using 4 methods, results of which I have tabulated as following :
<table>
<tbody>
<tr>
<td><strong>Method</strong></td>
<td><strong>Time</strong></td>
<td><strong>Comparision</strong></td>
</tr>
<tr>
<td><strong>Cin</strong></td>
<td> 2.72s</td>
<td><strong>SLOWEST </strong></td>
</tr>
<tr>
<td>scanf</td>
<td> 0.66s</td>
<td> SAFE</td>
</tr>
<tr>
<td>cin with sync_with_stdio(false)</td>
<td>0.54s</td>
<td> NICE</td>
</tr>
<tr>
<td><strong>getchar_unlocked()</strong></td>
<td><strong>0.11s</strong></td>
<td> <em><strong>FASTEST</strong></em></td>
</tr>
</tbody>
</table>
If you require fast IO, always use getchar_unlocked(), but remember, with great power comes great responsibility. getchar_unlocked() is not thread safe, getchar_unlocked is a thread unsafe version of getchar( ), and as it does not check for any locks for threads accessing stdin. In short, you can use for normal integer inputs and when having large Input requirements.

Code Example using getchar_unlocked()

[code language="cpp"]
#include &lt;iostream&gt;
#include &lt;cstdio&gt;
using namespace std;
#define gc getchar_unlocked
void scan(int &amp;input) //for int only
{
 input = 0;
 register int c = gc();
 for(;(c&lt;48 || c&gt;57);c = gc()); //for omitting spaces or any other character (other than number)
 for(;c&gt;47 &amp;&amp; c&lt;58;c = gc()) {input = (input&lt;&lt;1) + (input&lt;&lt;3) + c - 48;} //reading of the number
}
int main()
{

 int n,k,i,ctr=0,x;
 scan(n);
 scan(k);
 for(i=0;i&lt;n;i++)
 {
 scan(x);
 if(x%k==0)
 ctr++;
 }
 cout&lt;&lt;ctr;
 return 0;
}

[/code]
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>124</wp:post_id>
  <wp:post_date>2015-10-18 21:06:35</wp:post_date>
  <wp:post_date_gmt>2015-10-18 21:06:35</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>comparing-input-functions-for-spoj-input-intensive-problem-intest</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[82754425]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[15959133642]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Dijkstra's Algorithm - Shortest Path</title>
  <link>https://fzeesblog.wordpress.com/2016/03/24/dijkstras-algorithm-shortest-path/</link>
  <pubDate>Thu, 24 Mar 2016 14:59:33 +0000</pubDate>
  <dc:creator>feroz29</dc:creator>
  <guid isPermaLink="false">https://fzeesblog.wordpress.com/?p=153</guid>
  <description/>
  <content:encoded><![CDATA[Concept of Set can be understood by following code :

[code language="cpp"]

#include &lt;iostream&gt;
#include&lt;set&gt;
using namespace std;
int main() {
// your code goes here
set &lt;pair&lt;int,int&gt;&gt; S;
set &lt;pair&lt;int,int&gt;&gt; :: iterator it;
S.insert({2,100});
S.insert({1,200});
S.insert({1,50});
for(it = S.begin();it!=S.end();it++)
{
cout&lt;&lt;(*it).first&lt;&lt;&quot; &quot;&lt;&lt;(*it).second&lt;&lt;endl;

}
return 0;
}

[/code]

Output:
1 50
1 200
2 100

This property of set can be easily utilized, that set keeps all its elements in kind of sorted order. (using Red-Black Trees)

Check out the code for <a href="http://www.spoj.com/problems/SHPATH/">SPOJ - SHPATH</a> at : <a href="http://ideone.com/Ip8Kzf">http://ideone.com/Ip8Kzf</a>

Psuedocode  from CLRS :

[code language="python"]
function Dijkstra(Graph, source):
     create vertex set Q
     for each vertex v in Graph:             // Initialization
         dist[v] ← INFINITY                  // Unknown distance from source to v
         prev[v] ← UNDEFINED                 // Previous node in optimal path from source
         add v to Q                          // All nodes initially in Q (unvisited nodes)
     dist[source] ← 0                        // Distance from source to source
     
     while Q is not empty:
         u ← vertex in Q with min dist[u]    // Source node will be selected first
         remove u from Q 
         
         for each neighbor v of u:           // where v is still in Q.
             alt ← dist[u] + length(u, v)
             if alt &lt; dist[v]:               // A shorter path to v has been found
                 dist[v] ← alt 
                 prev[v] ← u 
     return dist[], prev[]
[/code]
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>153</wp:post_id>
  <wp:post_date>2016-03-24 14:59:33</wp:post_date>
  <wp:post_date_gmt>2016-03-24 14:59:33</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>dijkstras-algorithm-shortest-path</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="algorithms"><![CDATA[Algorithms]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[82754425]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21087248057]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Shell Sort</title>
  <link>https://fzeesblog.wordpress.com/2016/04/10/shell-sort/</link>
  <pubDate>Sun, 10 Apr 2016 15:09:26 +0000</pubDate>
  <dc:creator>feroz29</dc:creator>
  <guid isPermaLink="false">https://fzeesblog.wordpress.com/?p=163</guid>
  <description/>
  <content:encoded><![CDATA[There are many implementations of this sort available,  but in this article I have taken O(n2) implementation.

It is a modified insertion sort such that we are maintaining of the "sorted part" of the insert sort algo, at discrete gaps rather than being contiguous as in normal insertion sort.

Other modified versions : <a href="https://en.wikipedia.org/wiki/Shellsort#Gap_sequences">WIKI</a>

[code]
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
void shell_sort(int arr[], int n)
{
    int gap,i,j;
    //we change the gap/ shell size from n/2,n/4......1
    for(gap=n/2;gap&gt;0;gap/=2) //ranges gap = n/2 ---&gt;1
    {
        //we perform something similar to insertion sort but rather than taking elements which are adjacent
        //in memory locations we take them at certain &quot;gap&quot; (also the variable name used in code is as same)
        for(i=gap;i&lt;n;i++) //for all elements using the shell length { int temp=arr[i]; for(j=i;j&gt;=gap &amp;&amp; arr[j-gap]&gt;temp;j=j-gap) //the insertion step, we jump at elements before i, but by a leap = gap
            {
                arr[j]=arr[j-gap];
            }
            arr[j]=temp;
        }
    }
}

int main()
{
    printf(&quot;Enter the array : \n&quot;);
    int n, a[]={5,6,8,9,8,7,6,8,4,6,2,1,6};
    n=sizeof(a)/sizeof(int);
    shell_sort(a,n);
    for(int i=0;i&lt;n;i++)
    {
        printf(&quot; %d &quot;, a[i]);
    }

    return 0;
}


[/code]
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>163</wp:post_id>
  <wp:post_date>2016-04-10 15:09:26</wp:post_date>
  <wp:post_date_gmt>2016-04-10 15:09:26</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>shell-sort</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="algorithms"><![CDATA[Algorithms]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[82754425]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21646616298]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>P, NP, NP-complete and NP-Hard ?</title>
  <link>https://fzeesblog.wordpress.com/?p=168</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>feroz29</dc:creator>
  <guid isPermaLink="false">https://fzeesblog.wordpress.com/?p=168</guid>
  <description/>
  <content:encoded><![CDATA[In abstract sense, they are classes of decision problems having certain characteristics regarding their run time complexities.
**Decision problem: A problem with a yes or no answer.
<h1>P</h1>
<em>P is a complexity class that represents the set of all decision problems that can be SOLVED in polynomial time</em>. That is, given an instance of the problem, the answer yes or no can be decided in polynomial time.
<h1>NP</h1>
<em>NP is a complexity class that represents the set of all decision problems for which the instances where the answer is "yes" have proofs that can be VERIFIED in polynomial time.</em>

Some people think P = NP, which means any problem that can be verified in polynomial time can also be solved in polynomial time and vice versa.  If they could prove this, it would revolutionize computer science because people would be able to construct faster algorithms for a lot of important problems.
<h1>NP-hard</h1>
Intuitively, these are the problems that are <em>at least as hard as the NP-complete problems</em>. NP-hard problems <em>do not have to be in NP</em>, and <em>they do not have to be decision problems</em>.

The precise definition here is that <em>a problem <code>X</code> is NP-hard, if there is an NP-complete problem <code>Y</code>, such that <code>Y</code> is reducible to <code>X</code> in polynomial time</em>.
<h1>NP-Complete</h1>
<em>NP-Complete is a complexity class which represents the set of all problems <code>X</code> in NP for which it is possible to reduce any other NP problem <code>Y</code> to <code>X</code> in polynomial time.</em>

Intuitively this means that we can solve <code>Y</code> quickly if we know how to solve <code>X</code> quickly. Precisely, <code>Y</code> is reducible to <code>X</code>, if there is a polynomial time algorithm <code>f</code> to transform instances <code>y</code> of <code>Y</code> to instances <code>x = f(y)</code> of <code>X</code> in polynomial time, with the property that the answer to <code>y</code> is yes, if and only if the answer to <code>f(y)</code> is yes.

A problem is <b>NP-complete</b> if the problem is both
<ul>
	<li>NP-hard, and</li>
	<li>in NP</li>
</ul>
and a nice explanation here : <a href="https://www.quora.com/What-are-P-NP-NP-complete-and-NP-hard">https://www.quora.com/What-are-P-NP-NP-complete-and-NP-hard</a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>168</wp:post_id>
  <wp:post_date>2016-04-10 16:57:51</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[82754425]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
</item>
  </channel>
</rss>
